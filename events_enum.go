// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package downtime

import (
	"fmt"
)

const (
	// EventTypeNone is a EventType of type None.
	EventTypeNone EventType = iota
	// EventTypeUp is a EventType of type Up.
	EventTypeUp
	// EventTypeShutdown is a EventType of type Shutdown.
	EventTypeShutdown
	// EventTypeCrash is a EventType of type Crash.
	EventTypeCrash
)

const _EventTypeName = "NoneUpShutdownCrash"

var _EventTypeMap = map[EventType]string{
	EventTypeNone:     _EventTypeName[0:4],
	EventTypeUp:       _EventTypeName[4:6],
	EventTypeShutdown: _EventTypeName[6:14],
	EventTypeCrash:    _EventTypeName[14:19],
}

// String implements the Stringer interface.
func (x EventType) String() string {
	if str, ok := _EventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventType(%d)", x)
}

var _EventTypeValue = map[string]EventType{
	_EventTypeName[0:4]:   EventTypeNone,
	_EventTypeName[4:6]:   EventTypeUp,
	_EventTypeName[6:14]:  EventTypeShutdown,
	_EventTypeName[14:19]: EventTypeCrash,
}

// ParseEventType attempts to convert a string to a EventType.
func ParseEventType(name string) (EventType, error) {
	if x, ok := _EventTypeValue[name]; ok {
		return x, nil
	}
	return EventType(0), fmt.Errorf("%s is not a valid EventType", name)
}

// MarshalText implements the text marshaller method.
func (x EventType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EventType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEventType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
